package com.hojeonde.hoje.services;

import com.hojeonde.hoje.models.Evento;
import com.hojeonde.hoje.repositories.EventoRepository;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Optional;

@service
public class EventoService {
    @Autowired
    private EventoRepository eventoRepository;
    public List<Evento> findAll() {
        return eventoRepository.findAll();
    }

    public Evento findById(String id) {
         if (id == null || id.trim().isEmpty()) {
            throw new IllegalArgumentException("ID n√£o pode ser nulo ou vazio");
        }

        Optional<Evento> evento = eventoRepository.findById(id);
        if (evento.isEmpty()) {
            throw new IllegalArgumentException("Evento com ID " + id + " n√£o encontrado");
        }
        return evento.get();
    }

    public Evento save(Evento evento) {
          // Valida√ß√£o de evento n√£o nulo
        if (evento == null) {
            throw new IllegalArgumentException("Evento n√£o pode ser nulo");
        }

        // Valida√ß√£o de campos essenciais no evento (supondo que um campo como 'nome' seja obrigat√≥rio)
        if (evento.getNome() == null || evento.getNome().trim().isEmpty()) {
            throw new IllegalArgumentException("O nome do evento n√£o pode ser vazio");
        }

        // Adicionar outras valida√ß√µes de campos do evento conforme necess√°rio
 // Verifica√ß√£o se j√° existe um evento com o mesmo nome e data (ajustar conforme necess√°rio)
        if (eventoRepository.existsByNomeAndData(evento.getNome(), evento.getData())) {
            throw new IllegalArgumentException("J√° existe um evento com o nome '" + evento.getNome() + "' e data '" + evento.getData() + "'");
        }
        return eventoRepository.save(evento);
    }

    public void delete(String id) {
         // Valida√ß√£o de ID n√£o nulo ou vazio
        if (id == null || id.trim().isEmpty()) {
            throw new IllegalArgumentException("ID n√£o pode ser nulo ou vazio");
        }

        // Verifica se o evento existe antes de tentar excluir
        if (!eventoRepository.existsById(id)) {
            throw new IllegalArgumentException("Evento com ID " + id + " n√£o encontrado para exclus√£o");
        }

        eventoRepository.deleteById(id);
    }
}


O servi√ßo EventoService √© o componente da camada de neg√≥cio respons√°vel por gerenciar a l√≥gica associada √† entidade Evento. Este servi√ßo atua como intermedi√°rio entre os controladores REST e o reposit√≥rio, assegurando a integridade dos dados e aplicando regras de neg√≥cio antes de persistir ou consultar informa√ß√µes no banco de dados.

üîç C√≥digo-Fonte

@service
public class EventoService {
üõ†Ô∏è Corre√ß√£o necess√°ria: A anota√ß√£o @service est√° incorreta. O correto √© @Service (com S mai√∫sculo), que informa ao Spring que esta classe √© um bean de servi√ßo.

üì¶ Inje√ß√£o de Depend√™ncia
java
Copiar
Editar
@Autowired
private EventoRepository eventoRepository;
Utiliza a anota√ß√£o @Autowired para injetar o reposit√≥rio EventoRepository, permitindo acesso √†s opera√ß√µes de persist√™ncia sem precisar instanciar manualmente o reposit√≥rio.

üìö M√©todos e Regras de Neg√≥cio
üîÅ findAll()

public List<Evento> findAll() {
    return eventoRepository.findAll();
}
Retorna todos os eventos cadastrados no banco de dados. Nenhuma valida√ß√£o √© necess√°ria aqui, pois se trata de uma leitura aberta.

üîç findById(String id)

public Evento findById(String id) {
    if (id == null || id.trim().isEmpty()) {
        throw new IllegalArgumentException("ID n√£o pode ser nulo ou vazio");
    }

    Optional<Evento> evento = eventoRepository.findById(id);
    if (evento.isEmpty()) {
        throw new IllegalArgumentException("Evento com ID " + id + " n√£o encontrado");
    }
    return evento.get();
}
Este m√©todo realiza:

Valida√ß√£o do ID;

Verifica√ß√£o da exist√™ncia do evento;

Retorno do evento, se encontrado.

O uso de Optional previne NullPointerException e oferece uma forma mais segura de acessar valores retornados do banco.

üíæ save(Evento evento)

public Evento save(Evento evento) {
    if (evento == null) {
        throw new IllegalArgumentException("Evento n√£o pode ser nulo");
    }

    if (evento.getNome() == null || evento.getNome().trim().isEmpty()) {
        throw new IllegalArgumentException("O nome do evento n√£o pode ser vazio");
    }

    if (eventoRepository.existsByNomeAndData(evento.getNome(), evento.getData())) {
        throw new IllegalArgumentException("J√° existe um evento com o nome '" + evento.getNome() + "' e data '" + evento.getData() + "'");
    }

    return eventoRepository.save(evento);
}
Este m√©todo √© o mais robusto em termos de valida√ß√£o:

Garante que o objeto n√£o seja nulo;

Valida campos obrigat√≥rios;

Impede duplica√ß√µes de eventos com mesmo nome e data (nota: existsByNomeAndData() deve existir no reposit√≥rio);

Persiste o evento se todas as valida√ß√µes forem satisfeitas.

üõ†Ô∏è Aten√ß√£o: os campos getData() e getNome() precisam existir na entidade Evento. No seu c√≥digo atual, esses campos est√£o como dataInicio, dataFim, e nome. Logo, o m√©todo existsByNomeAndData() precisa ser ajustado ou implementado corretamente no reposit√≥rio com base nesses campos.

üóëÔ∏è delete(String id)

public void delete(String id) {
    if (id == null || id.trim().isEmpty()) {
        throw new IllegalArgumentException("ID n√£o pode ser nulo ou vazio");
    }

    if (!eventoRepository.existsById(id)) {
        throw new IllegalArgumentException("Evento com ID " + id + " n√£o encontrado para exclus√£o");
    }

    eventoRepository.deleteById(id);
}
Este m√©todo:

Valida a entrada;

Garante que o evento existe antes de tentar delet√°-lo;

Executa a exclus√£o com seguran√ßa.

üìå Considera√ß√µes Finais
A classe EventoService demonstra boas pr√°ticas de valida√ß√£o e responsabilidade de neg√≥cio. No entanto, √© necess√°rio:

Corrigir a anota√ß√£o @service para @Service.

Confirmar ou implementar o m√©todo existsByNomeAndData() no reposit√≥rio.

Garantir que os nomes dos m√©todos e atributos usados em valida√ß√µes correspondam √† entidade Evento.

