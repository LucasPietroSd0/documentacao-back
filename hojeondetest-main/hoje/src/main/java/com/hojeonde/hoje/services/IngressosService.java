package com.hojeonde.hoje.services;

import com.hojeonde.hoje.models.Ingressos;
import com.hojeonde.hoje.repositories.IngressosRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class IngressosService {
    @Autowired
    private IngressosRepository ingressosRepository;

    public List<Ingressos> findAll() {
        return ingressosRepository.findAll();
    }

    public Ingressos findById(String id) {
        return ingressosRepository.findById(id).orElse(null);
    }

    public Ingressos save(Ingressos ingresso) {
        return ingressosRepository.save(ingresso);
    }

    public void delete(String id) {
        ingressosRepository.deleteById(id);
    }
}


O servi√ßo IngressosService gerencia as opera√ß√µes de neg√≥cio relacionadas aos objetos do tipo Ingressos, como cria√ß√£o, consulta, listagem e exclus√£o. Ele atua como uma ponte entre o controlador REST (IngressosController) e a camada de persist√™ncia (IngressosRepository), centralizando as regras de l√≥gica de neg√≥cio.

üì¶ Estrutura da Classe

@Service
public class IngressosService {
A anota√ß√£o @Service indica ao Spring que esta classe √© um componente de servi√ßo. O Spring gerencia sua inst√¢ncia automaticamente e a torna dispon√≠vel para inje√ß√£o em outras partes da aplica√ß√£o.

üíâ Inje√ß√£o de Depend√™ncia

@Autowired
private IngressosRepository ingressosRepository;
Aqui, o reposit√≥rio IngressosRepository √© injetado automaticamente pelo Spring, o que permite que a classe acesse m√©todos prontos como findAll, findById, save e deleteById.

üîÅ findAll()

public List<Ingressos> findAll() {
    return ingressosRepository.findAll();
}
Este m√©todo busca todos os registros de ingressos no banco de dados. Ele retorna uma lista de objetos Ingressos, representando todos os ingressos cadastrados.

üîç findById(String id)

public Ingressos findById(String id) {
    return ingressosRepository.findById(id).orElse(null);
}
Busca um ingresso por seu ID. Usa Optional e retorna o ingresso, se encontrado, ou null, se n√£o existir.

üìå Melhoria sugerida: lan√ßar uma exce√ß√£o personalizada em vez de retornar null, para tratar erros de forma mais clara e segura.

üíæ save(Ingressos ingresso)

public Ingressos save(Ingressos ingresso) {
    return ingressosRepository.save(ingresso);
}
Salva um novo ingresso ou atualiza um j√° existente. O Spring Data JPA identifica se √© uma inser√ß√£o ou atualiza√ß√£o com base no ID do objeto.

üìå Sugest√£o de melhoria: adicionar valida√ß√µes no ingresso antes de salvar (ex.: verificar se os campos tipo, valor, ou evento est√£o preenchidos corretamente).

üóëÔ∏è delete(String id)

public void delete(String id) {
    ingressosRepository.deleteById(id);
}
Exclui um ingresso do banco de dados com base no ID fornecido. Se o ID n√£o existir, o Spring lan√ßar√° uma exce√ß√£o.

üìå Melhoria sugerida: verificar se o ingresso existe antes de deletar, evitando falhas inesperadas.
