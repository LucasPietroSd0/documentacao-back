package com.hojeonde.hoje.services;

import com.hojeonde.hoje.models.Local;
import com.hojeonde.hoje.repositories.LocalRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class LocalService {
    @Autowired
    private LocalRepository localRepository;

    public List<Local> findAll() {
        return localRepository.findAll();
    }

    public Local findById(String id) {
        return localRepository.findById(id).orElse(null);
    }

    public Local save(Local local) {
        return localRepository.save(local);
    }

    public void delete(String id) {
        localRepository.deleteById(id);
    }
}


A classe LocalService √© respons√°vel por encapsular toda a l√≥gica de neg√≥cio referente √† entidade Local. 
Ela intermedia as chamadas entre o controlador REST e o reposit√≥rio de dados, garantindo que o acesso ao banco 
seja feito de forma organizada e, futuramente, validada.

üì¶ Estrutura da Classe

@Service
public class LocalService {
A anota√ß√£o @Service define esta classe como um Spring Bean do tipo service. Isso significa que o Spring ir√° gerenciar
sua inst√¢ncia e torn√°-la dispon√≠vel para inje√ß√£o de depend√™ncia onde for necess√°ria.

üß© Inje√ß√£o do Reposit√≥rio

@Autowired
private LocalRepository localRepository;
Por meio da anota√ß√£o @Autowired, o reposit√≥rio LocalRepository √© injetado automaticamente na classe. 
Isso permite que m√©todos do JPA como findAll, findById, save e deleteById sejam utilizados diretamente.

üìÑ M√©todo: findAll()

public List<Local> findAll() {
    return localRepository.findAll();
}
Este m√©todo retorna todos os registros da tabela Locais do banco de dados.

üìù Uso t√≠pico: exibir uma lista de locais em um painel de administra√ß√£o ou no frontend do sistema.

üîç M√©todo: findById(String id)

public Local findById(String id) {
    return localRepository.findById(id).orElse(null);
}
Busca um local pelo seu ID. Caso n√£o exista, retorna null.

üí° Melhoria recomendada: usar uma exce√ß√£o personalizada ao inv√©s de retornar null para evitar problemas de NullPointerException.

üìù M√©todo: save(Local local)

public Local save(Local local) {
    return localRepository.save(local);
}
Este m√©todo salva (ou atualiza, se j√° existir) um registro de local. O Spring Data JPA decide se √© inser√ß√£o ou atualiza√ß√£o 
baseado no ID da entidade.

üìå Recomenda√ß√£o: validar campos obrigat√≥rios como nome, endereco ou capacidade antes de salvar.

üóëÔ∏è M√©todo: delete(String id)

public void delete(String id) {
    localRepository.deleteById(id);
}
Remove um local do banco de dados usando o ID fornecido. Se o ID n√£o existir, o Spring poder√° lan√ßar uma exce√ß√£o.

üìå Melhoria: checar se o local existe antes de tentar deletar, para maior seguran√ßa.
