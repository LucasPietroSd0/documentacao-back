package com.hojeonde.hoje.services;

import com.hojeonde.hoje.models.Organizador;
import com.hojeonde.hoje.repositories.OrganizadorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class OrganizadorService {
    @Autowired
    private OrganizadorRepository organizadorRepository;

    public List<Organizador> findAll() {
        return organizadorRepository.findAll();
    }

    public Organizador findById(String id) {
        return organizadorRepository.findById(id).orElse(null);
    }

    public Organizador save(Organizador organizador) {
        return organizadorRepository.save(organizador);
    }

    public void delete(String id) {
        organizadorRepository.deleteById(id);
    }
}


A classe OrganizadorService encapsula a l√≥gica de neg√≥cio relacionada √† entidade Organizador. Ela atua como um intermedi√°rio entre o controlador REST e o reposit√≥rio de dados, gerenciando as opera√ß√µes de consulta, persist√™ncia e exclus√£o de organizadores.

üì¶ Estrutura da Classe

@Service
public class OrganizadorService {
A anota√ß√£o @Service indica que esta classe √© um Spring Bean do tipo service, o que permite ao Spring gerenciar sua inst√¢ncia e injet√°-la automaticamente onde for necess√°rio.

üß© Inje√ß√£o do Reposit√≥rio

@Autowired
private OrganizadorRepository organizadorRepository;
A inje√ß√£o do reposit√≥rio OrganizadorRepository permite que a classe OrganizadorService utilize as opera√ß√µes b√°sicas do JPA, como findAll(), findById(), save() e deleteById().

üìÑ M√©todo: findAll()

public List<Organizador> findAll() {
    return organizadorRepository.findAll();
}
Este m√©todo retorna todos os organizadores cadastrados no banco de dados.

üìù Uso t√≠pico: exibir uma lista de organizadores em uma tela administrativa ou no frontend do sistema.

üîç M√©todo: findById(String id)

public Organizador findById(String id) {
    return organizadorRepository.findById(id).orElse(null);
}
Busca um organizador pelo seu ID. Se o organizador n√£o for encontrado, o m√©todo retorna null.

üí° Melhoria recomendada: ao inv√©s de retornar null, considere lan√ßar uma exce√ß√£o personalizada para melhorar o tratamento de erros.

üìù M√©todo: save(Organizador organizador)

public Organizador save(Organizador organizador) {
    return organizadorRepository.save(organizador);
}
Salva um novo organizador ou atualiza um j√° existente, dependendo de seu estado no banco de dados.

üìå Recomenda√ß√£o: validar campos obrigat√≥rios antes de salvar a entidade, como o nome, email e telefone.

üóëÔ∏è M√©todo: delete(String id)

public void delete(String id) {
    organizadorRepository.deleteById(id);
}
Este m√©todo deleta um organizador baseado no ID fornecido. Se o ID n√£o existir, o Spring pode lan√ßar uma exce√ß√£o.

üìå Melhoria: verifique se o organizador existe antes de tentar excluir, para evitar exce√ß√µes desnecess√°rias.

