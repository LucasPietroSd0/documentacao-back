package com.hojeonde.hoje.services;

import com.hojeonde.hoje.models.User;
import com.hojeonde.hoje.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public List<User> findAll() {
        return userRepository.findAll();
    }

    public User findById(Long id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            return user.get();
        } else {
            throw new IllegalArgumentException("Usu√°rio com ID " + id + " n√£o encontrado.");
        }
    }

    public User save(User user) {
        // Verifica se j√° existe um usu√°rio com mesmo email
        Optional<User> existingUser = userRepository.findByEmail(user.getEmail());

        if (existingUser.isPresent()) {
            throw new IllegalArgumentException("J√° existe um usu√°rio com o e-mail: " + user.getEmail());
        }

        return userRepository.save(user);
    }

    public void delete(Long id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            userRepository.deleteById(id);
        } else {
            throw new IllegalArgumentException("N√£o √© poss√≠vel deletar. Usu√°rio com ID " + id + " n√£o encontrado.");
        }
    }
}

A classe UserService cont√©m a l√≥gica de neg√≥cios relacionada aos usu√°rios do sistema. Ela interage com o reposit√≥rio UserRepository para fornecer opera√ß√µes de consulta, persist√™ncia e exclus√£o de usu√°rios. Al√©m disso, realiza valida√ß√µes, como verificar se um e-mail j√° est√° registrado, ou se o usu√°rio existe antes de realizar a exclus√£o.

üì¶ Estrutura da Classe

@Service
public class UserService {
A anota√ß√£o @Service √© usada para indicar que a classe √© um componente do Spring, respons√°vel por encapsular a l√≥gica de neg√≥cios. O Spring gerencia a inst√¢ncia dessa classe, permitindo que seja injetada automaticamente onde necess√°rio.

üß© Inje√ß√£o do Reposit√≥rio

@Autowired
private UserRepository userRepository;
A inje√ß√£o do reposit√≥rio UserRepository permite que a classe UserService interaja com o banco de dados, utilizando as opera√ß√µes b√°sicas do Spring Data JPA para recuperar, salvar e excluir usu√°rios.

üìÑ M√©todo: findAll()

public List<User> findAll() {
    return userRepository.findAll();
}
Este m√©todo retorna todos os usu√°rios registrados no sistema. Ele retorna uma lista de objetos User.

üìù Uso t√≠pico: exibir todos os usu√°rios cadastrados em uma interface administrativa ou p√°gina de relat√≥rios.

üîç M√©todo: findById(Long id)

public User findById(Long id) {
    Optional<User> user = userRepository.findById(id);
    if (user.isPresent()) {
        return user.get();
    } else {
        throw new IllegalArgumentException("Usu√°rio com ID " + id + " n√£o encontrado.");
    }
}
Este m√©todo recupera um usu√°rio pelo seu ID. Se o usu√°rio for encontrado, ele √© retornado. Caso contr√°rio, uma exce√ß√£o IllegalArgumentException √© lan√ßada com uma mensagem informando que o usu√°rio n√£o foi encontrado.

üìå Melhoria sugerida: para uma melhor experi√™ncia do usu√°rio, poderia ser lan√ßada uma exce√ß√£o personalizada, como UserNotFoundException, em vez de IllegalArgumentException.

üìù M√©todo: save(User user)

public User save(User user) {
    // Verifica se j√° existe um usu√°rio com mesmo email
    Optional<User> existingUser = userRepository.findByEmail(user.getEmail());

    if (existingUser.isPresent()) {
        throw new IllegalArgumentException("J√° existe um usu√°rio com o e-mail: " + user.getEmail());
    }

    return userRepository.save(user);
}
Este m√©todo salva um novo usu√°rio no banco de dados, ap√≥s validar se j√° existe um usu√°rio com o mesmo e-mail. Caso exista, uma exce√ß√£o IllegalArgumentException √© lan√ßada, informando que o e-mail j√° est√° em uso.

üìå Sugest√£o de melhoria: poderia ser considerado o uso de uma exce√ß√£o personalizada para o caso de e-mail duplicado.

üóëÔ∏è M√©todo: delete(Long id)

public void delete(Long id) {
    Optional<User> user = userRepository.findById(id);
    if (user.isPresent()) {
        userRepository.deleteById(id);
    } else {
        throw new IllegalArgumentException("N√£o √© poss√≠vel deletar. Usu√°rio com ID " + id + " n√£o encontrado.");
    }
}
Este m√©todo deleta um usu√°rio pelo ID. Se o usu√°rio for encontrado, ele ser√° removido do banco de dados. Caso contr√°rio, uma exce√ß√£o IllegalArgumentException √© lan√ßada, indicando que o usu√°rio n√£o foi encontrado.

üìå Melhoria poss√≠vel: em vez de lan√ßar uma exce√ß√£o IllegalArgumentException, poderia ser utilizada uma exce√ß√£o espec√≠fica para a opera√ß√£o de exclus√£o, como UserNotFoundException.
